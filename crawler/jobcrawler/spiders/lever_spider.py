import scrapy, orjson, datetime as dt\n\nclass LeverSpider(scrapy.Spider):\n    name = \"lever\"\n    def start_requests(self):\n        for c in [\"stripe\",\"openai\",\"databricks\"]:\n            url = f\"https://api.lever.co/v0/postings/{c}?mode=json\"\n            yield scrapy.Request(url, callback=self.parse_jobs)\n\n    def parse_jobs(self, resp):\n        now = dt.datetime.utcnow()\n        for j in orjson.loads(resp.text):\n            created = dt.datetime.utcfromtimestamp(j.get(\"createdAt\",0)/1000)\n            if (now - created).total_seconds() > 24*3600: continue\n            yield {\n                \"source\": \"Lever\",\n                \"company\": j.get(\"categories\",{}).get(\"team\") or j.get(\"company\") or \"\",\n                \"title\": j[\"text\"],\n                \"location\": (j.get(\"categories\",{}).get(\"location\")),\n                \"remote\": \"remote\" if \"remote\" in j[\"text\"].lower() else None,\n                \"employment_type\": j.get(\"categories\",{}).get(\"commitment\"),\n                \"level\": None,\n                \"posted_at\": created.isoformat()+\"Z\",\n                \"apply_url\": j.get(\"hostedUrl\"),\n                \"canonical_url\": j.get(\"hostedUrl\"),\n                \"currency\": None,\n                \"salary_min\": None,\n                \"salary_max\": None,\n                \"salary_period\": None,\n                \"description_md\": scrapy.selector.Selector(text=j.get(\"descriptionPlain\",\"\")) .xpath(\"string(.)\").get(),\n                \"description_raw\": j.get(\"lists\"),\n                \"meta\": j,\n            }\n